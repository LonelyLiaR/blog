{"version":3,"sources":["store/reducers/ownUserInfo.ts","store/reducers/postsStore.ts","store/reducers/labelsStore.ts","store/reducers/index.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx","store/actions.ts"],"names":["ownUserInfo","state","avatar_url","nickname","desc","action","type","STORE_INFO","Object","assign","info","postsStore","STORE_POSTS","posts","MARK_POST","number","$body","body","asd","labels","$_NO_LABEL_","values","i","length","ls","l","name","push","combineReducers","labelsStore","createStore","Reducers","HomePage","React","lazy","ArchivesPage","LabelsPage","LabelPage","PostPage","ErrorPage","store","$tore","Suspense","fallback","exact","path","component","props","from","to","PureComponent","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Symbol"],"mappings":"8QAeeA,EAZK,WAGd,IAFJC,EAEG,uDAFyB,CAAEC,WAAY,GAAIC,SAAU,GAAIC,KAAM,IAClEC,EACG,uCACH,OAAQA,EAAOC,MACb,KAAKC,IACH,OAAOC,OAAOC,OAAO,GAAIR,EAAOI,EAAOK,MACzC,QACE,OAAOT,ICIEU,EAZI,WAAqF,IAApFV,EAAmF,uDAAxD,GAAyBI,EAA+B,uCACrG,OAAQA,EAAOC,MACb,KAAKM,IACH,OAAOJ,OAAOC,OAAO,GAAIR,EAAOI,EAAOQ,OACzC,KAAKC,IAEH,OADAb,EAAMI,EAAOU,QAAQC,MAAQX,EAAOY,KAC7BhB,EACT,QACE,OAAOA,ICqBEiB,EA7BH,WAGN,IAFJjB,EAEG,uDAFyB,GAC5BI,EACG,uCACH,OAAQA,EAAOC,MACb,KAAKM,IACH,IAAMO,EAASX,OAAOC,OAAO,GAAIR,GACjCkB,EAAOC,KAAe,GAEtB,IADA,IAAMP,EAAQL,OAAOa,OAAOhB,EAAOQ,OAC1BS,EAAI,EAAGA,EAAIT,EAAMU,OAAQD,IAAK,CACrC,IAAME,EAAKX,EAAMS,GAAGH,OACpB,GAAMK,EAAGD,OACP,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAGD,OAAQE,IAAK,CAAC,IAC3BC,EAASF,EAAGC,GAAZC,KACoB,qBAAjBP,EAAOO,KAChBP,EAAOO,GAAQ,IAEjBP,EAAOO,GAAMC,KAAKd,EAAMS,SAG1BH,EAAOC,KAAaO,KAAKd,EAAMS,IAGnC,OAAOH,EACT,QACE,OAAOlB,ICvBE2B,cAAgB,CAC7B5B,cACAW,aACAkB,gBCLaC,cAAYC,GCQrBC,EAAWC,IAAMC,KAAK,kBAAM,6DAC5BC,EAAeF,IAAMC,KAAK,kBAAM,6DAChCE,EAAaH,IAAMC,KAAK,kBAAM,6DAC9BG,EAAYJ,IAAMC,KAAK,kBAAM,6DAC7BI,EAAWL,IAAMC,KAAK,kBAAM,4DAC5BK,EAAYN,IAAMC,KAAK,kBAAM,sD,mLAQ/B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUM,MAAOC,GACf,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,IACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAM,kBAACd,EAAD,SACvC,kBAAC,IAAD,CAAOa,KAAK,YAAYC,UAAW,kBAAM,kBAACX,EAAD,SACzC,kBAAC,IAAD,CAAOU,KAAK,UAAUC,UAAW,kBAAM,kBAACV,EAAD,SACvC,kBAAC,IAAD,CACES,KAAK,oBACLC,UAAW,SACTC,GADS,OAEN,kBAACV,EAAcU,MAEtB,kBAAC,IAAD,CACEF,KAAK,aACLC,UAAW,SACTC,GADS,OAEN,kBAACT,EAAaS,MAErB,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAW,kBAAM,kBAACP,EAAD,SACtC,kBAAC,IAAD,CAAUS,KAAK,KAAKC,GAAG,mB,GAvBRhB,IAAMiB,eCVfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,igCCZN,IAAMC,EAAcC,YAAH,KAyDjBC,iBACE,oCACE,kBAAC,EAAD,MACA,kBAACF,EAAD,OAEFG,SAASC,eAAe,QDqEpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,+BE3InB,gIAAO,IAAM3D,EAAqB,aACrBK,EAAsB,cACtBE,EAAoB,YACpBM,EAA6B+C,OAAO,iB","file":"static/js/main.3bc59da5.chunk.js","sourcesContent":["import { STORE_INFO } from \"store/actions\";\r\nimport { OwnUserInfo } from \"types/reducers\";\r\n\r\nconst ownUserInfo = (\r\n  state: OwnUserInfo.IState = { avatar_url: \"\", nickname: \"\", desc: \"\" },\r\n  action: OwnUserInfo.IAction\r\n) => {\r\n  switch (action.type) {\r\n    case STORE_INFO:\r\n      return Object.assign({}, state, action.info);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default ownUserInfo;\r\n","import { STORE_POSTS, MARK_POST } from \"store/actions\";\r\nimport { PostsStore } from \"types/reducers\";\r\n\r\nconst postsStore = (state: PostsStore.IState = {} as PostsStore.IState, action: PostsStore.IAction) => {\r\n  switch (action.type) {\r\n    case STORE_POSTS:\r\n      return Object.assign({}, state, action.posts);\r\n    case MARK_POST:\r\n      state[action.number].$body = action.body;\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default postsStore;\r\n","import { STORE_POSTS, $_NO_LABEL_ } from \"store/actions\";\r\nimport { LabelsStore } from \"types/reducers\";\r\n\r\nconst asd = (\r\n  state: LabelsStore.IState = {} as LabelsStore.IState,\r\n  action: LabelsStore.IAction\r\n) => {\r\n  switch (action.type) {\r\n    case STORE_POSTS:\r\n      const labels = Object.assign({}, state);\r\n      labels[$_NO_LABEL_] = [];\r\n      const posts = Object.values(action.posts);\r\n      for (let i = 0; i < posts.length; i++) {\r\n        const ls = posts[i].labels;\r\n        if (!!ls.length) {\r\n          for (let l = 0; l < ls.length; l++) {\r\n            const { name } = ls[l];\r\n            if (typeof labels[name] === \"undefined\") {\r\n              labels[name] = [];\r\n            }\r\n            labels[name].push(posts[i]);\r\n          }\r\n        } else {\r\n          labels[$_NO_LABEL_].push(posts[i]);\r\n        }\r\n      }\r\n      return labels;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default asd;\r\n","import { combineReducers } from \"redux\";\r\nimport ownUserInfo from './ownUserInfo';\r\nimport postsStore from './postsStore';\r\nimport labelsStore from './labelsStore';\r\n\r\nexport default combineReducers({\r\n  ownUserInfo,\r\n  postsStore,\r\n  labelsStore\r\n});\r\n","import { createStore } from \"redux\";\r\nimport Reducers from \"./reducers\";\r\n\r\nexport default createStore(Reducers);\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport {\r\n  RouteComponentProps,\r\n  HashRouter,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport $tore from \"store/index\";\r\n\r\nconst HomePage = React.lazy(() => import(\"components/HomePage\"));\r\nconst ArchivesPage = React.lazy(() => import(\"components/ArchivesPage\"));\r\nconst LabelsPage = React.lazy(() => import(\"components/LabelsPage\"));\r\nconst LabelPage = React.lazy(() => import(\"components/LabelPage\"));\r\nconst PostPage = React.lazy(() => import(\"components/PostPage\"));\r\nconst ErrorPage = React.lazy(() => import(\"components/ErrorPage\"));\r\n\r\ninterface IRouteComponentProps<T> extends RouteComponentProps<T> {\r\n  [propName: string]: any;\r\n}\r\n\r\nexport default class extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        <Provider store={$tore}>\r\n          <React.Suspense fallback={\"\"}>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={() => <HomePage />} />\r\n              <Route path=\"/archives\" component={() => <ArchivesPage />} />\r\n              <Route path=\"/labels\" component={() => <LabelsPage />} />\r\n              <Route\r\n                path=\"/label/:labelName\"\r\n                component={(\r\n                  props: IRouteComponentProps<{ labelName: string }>\r\n                ) => <LabelPage {...props} />}\r\n              />\r\n              <Route\r\n                path=\"/p/:number\"\r\n                component={(\r\n                  props: IRouteComponentProps<{ number: string }>\r\n                ) => <PostPage {...props} />}\r\n              />\r\n              <Route path=\"/error\" component={() => <ErrorPage />} />\r\n              <Redirect from=\"/*\" to=\"/error\" />\r\n            </Switch>\r\n          </React.Suspense>\r\n        </Provider>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from \"react-dom\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    box-sizing: border-box;\r\n    -webkit-box-sizing: border-box;\r\n    -moz-box-sizing: border-box;\r\n    outline: none;\r\n  }\r\n\r\n  html,\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    position: relative;\r\n  }\r\n\r\n  body {\r\n    font-family: PingFang SC, Microsoft Jhenghei, Microsoft YaHei, sans-serif;\r\n    line-height: 1.5;\r\n    color: #333333;\r\n    -webkit-text-size-adjust: none;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    overflow-x: hidden;\r\n  }\r\n\r\n  a {\r\n    color: #2DB4D8;\r\n    text-decoration: none;\r\n    transition: color .3s;\r\n  }\r\n\r\n  a:hover {\r\n    color: #22BAD9;\r\n  }\r\n\r\n  #app {\r\n    height: 100%;\r\n    position: relative;\r\n  }\r\n\r\n  .markdown-body {\r\n    font-size: 15px;\r\n    color: #333333;\r\n    line-height: 1.75;\r\n    letter-spacing: 0.1px;\r\n\r\n    h1, h2 {\r\n      font-weight: 500;\r\n    }\r\n\r\n    h1, h2, h3, h4, h5, h6, strong {\r\n      color: #24292e;\r\n    }\r\n  }\r\n`;\r\n\r\nrender(\r\n  <>\r\n    <App />\r\n    <GlobalStyle />\r\n  </>,\r\n  document.getElementById(\"app\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n","export const STORE_INFO: string = \"store-info\";\r\nexport const STORE_POSTS: string = \"store-posts\";\r\nexport const MARK_POST: string = \"mark-post\";\r\nexport const $_NO_LABEL_: unique symbol = Symbol(\"$_NO_LABEL_\");"],"sourceRoot":""}